{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tools","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u5e38\u7528\u7684\u5c0f\u5de5\u5177\u96c6\u5408 \u5305\u542b\u5f88\u591a\u5de5\u5177, \u4e0d\u6ce8\u91cd\u7c7b\u522b</p>"},{"location":"filetool/","title":"filetool","text":"<p>This path the project documentation focuses on the realize of TokenCounter Class. Now it only support the models of OpenAI GPT mode, such as <code>gpt-3.5-turbo</code>.</p>"},{"location":"filetool/#_1","title":"\u53d8\u91cf","text":"<p>\u4e00\u4e2a\u65b9\u4fbf\u7684\u53d8\u91cf\u8c03\u8bd5\u5de5\u5177</p>"},{"location":"filetool/#toolsz.variable.pull","title":"<code>pull()</code>","text":"<p>\u4ece\u4e34\u65f6\u533a\u52a0\u8f7d\u5230\u5f53\u524d\u5168\u5c40\u53d8\u91cf</p> Source code in <code>toolsz/variable.py</code> <pre><code>def pull():\n    \"\"\"\u4ece\u4e34\u65f6\u533a\u52a0\u8f7d\u5230\u5f53\u524d\u5168\u5c40\u53d8\u91cf\n    \"\"\"\n    with open(VARIABLE_PATH, \"rb\") as f:\n        loaded_vars = dill.load(f)\n    # \u5c06\u53d8\u91cf\u6ce8\u5165\u5230\u5f53\u524d\u547d\u540d\u7a7a\u95f4\n    globals().update(loaded_vars)\n</code></pre>"},{"location":"filetool/#toolsz.variable.push","title":"<code>push()</code>","text":"<p>\u5c06\u5f53\u524d\u53d8\u91cf\u63a8\u9001\u5230\u4e34\u65f6\u533a</p> Source code in <code>toolsz/variable.py</code> <pre><code>def push():\n    \"\"\"\u5c06\u5f53\u524d\u53d8\u91cf\u63a8\u9001\u5230\u4e34\u65f6\u533a\n    \"\"\"\n    with open(VARIABLE_PATH, \"wb\") as f:\n        dill.dump({k:v for k,v in globals().items() if not k.startswith('__')}, f)\n</code></pre>"},{"location":"filetool/#_2","title":"\u65f6\u95f4","text":"<p>\u65f6\u95f4\u5c0f\u5de5\u5177</p>"},{"location":"filetool/#toolsz.time.get_today","title":"<code>get_today()</code>","text":"<p>\u8fd4\u56de\u5f53\u524d\u672c\u5730\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD' \u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u6b64\u51fd\u6570\u4f7f\u7528\u7cfb\u7edf\u7684\u672c\u5730\u65f6\u95f4\u6765\u786e\u5b9a\u5f53\u524d\u65e5\u671f\u3002</p> \u8fd4\u56de <p>str: \u5f53\u524d\u672c\u5730\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\u3002</p> Source code in <code>toolsz/time.py</code> <pre><code>def get_today():\n    \"\"\"\u8fd4\u56de\u5f53\u524d\u672c\u5730\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD' \u7684\u5b57\u7b26\u4e32\u3002\n\n    \u6b64\u51fd\u6570\u4f7f\u7528\u7cfb\u7edf\u7684\u672c\u5730\u65f6\u95f4\u6765\u786e\u5b9a\u5f53\u524d\u65e5\u671f\u3002\n\n    \u8fd4\u56de:\n        str: \u5f53\u524d\u672c\u5730\u65e5\u671f\uff0c\u683c\u5f0f\u4e3a 'YYYY-MM-DD'\u3002\n    \"\"\"\n    local_time = datetime.today()\n    local_time = local_time.strftime(\"%Y-%m-%d\")\n    # local_time = local_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n    return local_time\n</code></pre>"},{"location":"filetool/#_3","title":"\u7cfb\u7edf","text":"<p>\u7cfb\u7edf\u5de5\u4f5c</p>"},{"location":"filetool/#toolsz.system_lib.DDMessage","title":"<code>DDMessage</code>","text":"<p>DingDing_POST\u7c7b\u7528\u4e8e\u5411\u9489\u9489\u53d1\u9001POST\u8bf7\u6c42\u3002</p> Source code in <code>toolsz/system_lib.py</code> <pre><code>class DDMessage:\n    \"\"\"DingDing_POST\u7c7b\u7528\u4e8e\u5411\u9489\u9489\u53d1\u9001POST\u8bf7\u6c42\u3002\n    \"\"\"\n    def __init__(self):\n        \"\"\"\u521d\u59cb\u5316DingDing_POST\u7c7b\u3002\n        \"\"\"\n        token = os.environ.get(\"DD_TOKEN\")\n        self.host = f\"https://oapi.dingtalk.com/robot/send?access_token={token}\"\n\n    def send(self,role: str, content: str)-&gt;None:\n        \"\"\"\n        \u5411\u9489\u9489\u53d1\u9001\u6587\u672c\u6d88\u606f.   \n\n        \u53c2\u6570:   \n        role (str): \u4fe1\u53f7\u53d1\u51fa\u8005 \u53ef\u4ee5\u4f7f\u7528Agent System Majordomo    \n        content (str): \u6d88\u606f\u5185\u5bb9\u3002   \n\n        \u8fd4\u56de:\n        None\n        \"\"\"\n        assert role in [\"Agent\", \"System\", \"Majordomo\"]\n        content = f\"{role} : {content}\"\n        data = {\"msgtype\": \"text\", \"text\": {\"content\": content}}\n        requests.post(\n            self.host,\n            data=json.dumps(data),\n            headers={'Content-Type': 'application/json'}, timeout=10)\n</code></pre>"},{"location":"filetool/#toolsz.system_lib.DDMessage.__init__","title":"<code>__init__()</code>","text":"<p>\u521d\u59cb\u5316DingDing_POST\u7c7b\u3002</p> Source code in <code>toolsz/system_lib.py</code> <pre><code>def __init__(self):\n    \"\"\"\u521d\u59cb\u5316DingDing_POST\u7c7b\u3002\n    \"\"\"\n    token = os.environ.get(\"DD_TOKEN\")\n    self.host = f\"https://oapi.dingtalk.com/robot/send?access_token={token}\"\n</code></pre>"},{"location":"filetool/#toolsz.system_lib.DDMessage.send","title":"<code>send(role, content)</code>","text":"<p>\u5411\u9489\u9489\u53d1\u9001\u6587\u672c\u6d88\u606f.   </p> <p>\u53c2\u6570:  role (str): \u4fe1\u53f7\u53d1\u51fa\u8005 \u53ef\u4ee5\u4f7f\u7528Agent System Majordomo   content (str): \u6d88\u606f\u5185\u5bb9\u3002   </p> <p>\u8fd4\u56de: None</p> Source code in <code>toolsz/system_lib.py</code> <pre><code>def send(self,role: str, content: str)-&gt;None:\n    \"\"\"\n    \u5411\u9489\u9489\u53d1\u9001\u6587\u672c\u6d88\u606f.   \n\n    \u53c2\u6570:   \n    role (str): \u4fe1\u53f7\u53d1\u51fa\u8005 \u53ef\u4ee5\u4f7f\u7528Agent System Majordomo    \n    content (str): \u6d88\u606f\u5185\u5bb9\u3002   \n\n    \u8fd4\u56de:\n    None\n    \"\"\"\n    assert role in [\"Agent\", \"System\", \"Majordomo\"]\n    content = f\"{role} : {content}\"\n    data = {\"msgtype\": \"text\", \"text\": {\"content\": content}}\n    requests.post(\n        self.host,\n        data=json.dumps(data),\n        headers={'Content-Type': 'application/json'}, timeout=10)\n</code></pre>"},{"location":"filetool/#toolsz.system_lib.exec_str","title":"<code>exec_str(code, local_vars=None)</code>","text":"<p>\u6267\u884c\u4ee3\u7801\u5b57\u7b26\u4e32</p> <p>\u53c2\u6570:  code (str): \u4ee3\u7801\u5b57\u7b26\u4e32   local_vars (dict): \u53d8\u91cf   </p> <p>\u8fd4\u56de: dict</p> Source code in <code>toolsz/system_lib.py</code> <pre><code>def exec_str(code:str,local_vars:dict = None)-&gt;dict:\n    \"\"\"\n    \u6267\u884c\u4ee3\u7801\u5b57\u7b26\u4e32\n\n    \u53c2\u6570:   \n    code (str): \u4ee3\u7801\u5b57\u7b26\u4e32    \n    local_vars (dict): \u53d8\u91cf   \n\n    \u8fd4\u56de:\n    dict\n    \"\"\"\n    if local_vars is None:\n        local_vars = {}\n    exec(code, globals(), local_vars)\n    return local_vars\n</code></pre>"},{"location":"filetool/#toolsz.system_lib.password","title":"<code>password(key)</code>","text":"<p>\u52a8\u6001\u8f93\u5165\u5bc6\u7801</p> <p>\u53c2\u6570:  key (str): \u63d0\u793a\u4fe1\u606f    </p> <p>\u8fd4\u56de: None</p> Source code in <code>toolsz/system_lib.py</code> <pre><code>def password(key:str):\n    \"\"\"\n    \u52a8\u6001\u8f93\u5165\u5bc6\u7801\n\n    \u53c2\u6570:   \n    key (str): \u63d0\u793a\u4fe1\u606f    \n\n    \u8fd4\u56de:\n    None\n    \"\"\"\n    return getpass.getpass(f'{key} input:')\n</code></pre>"},{"location":"filetool/#toolsz.system_lib.send_message_via_dd","title":"<code>send_message_via_dd(role, content)</code>","text":"<p>\u901a\u8fc7\u9489\u9489\u673a\u5668\u4eba\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u53c2\u6570:  role (str): \u4fe1\u53f7\u53d1\u51fa\u8005\uff0c\u53ef\u4ee5\u662f \"Agent\", \"System\", \u6216 \"Majordomo\"\u3002   content (str): \u8981\u53d1\u9001\u7684\u6d88\u606f\u5185\u5bb9\u3002</p> <p>\u8fd4\u56de: None</p> Source code in <code>toolsz/system_lib.py</code> <pre><code>def send_message_via_dd(role: str, content: str):\n    \"\"\"\n    \u901a\u8fc7\u9489\u9489\u673a\u5668\u4eba\u53d1\u9001\u6d88\u606f\u3002\n\n    \u53c2\u6570:   \n    role (str): \u4fe1\u53f7\u53d1\u51fa\u8005\uff0c\u53ef\u4ee5\u662f \"Agent\", \"System\", \u6216 \"Majordomo\"\u3002    \n    content (str): \u8981\u53d1\u9001\u7684\u6d88\u606f\u5185\u5bb9\u3002\n\n    \u8fd4\u56de:\n    None\n    \"\"\"\n    # \u786e\u4fdd\u73af\u5883\u53d8\u91cf\u4e2d\u6709\u9489\u9489\u673a\u5668\u4eba\u7684token\n    if not os.environ.get(\"DD_TOKEN\"):\n        raise ValueError(\"Environment variable 'DD_TOKEN' is not set.\")\n\n    # \u521b\u5efaDDMessage\u5b9e\u4f8b\n    dd_message = DDMessage()\n\n    # \u53d1\u9001\u6d88\u606f\n    dd_message.send(role, content)\n</code></pre>"},{"location":"filetool/#toolsz.system_lib.setprocesstitle","title":"<code>setprocesstitle(name)</code>","text":"<p>\u4fee\u6539\u7ebf\u7a0b\u540d</p> <p>\u53c2\u6570:  name (str): \u8bbe\u5b9a\u7684\u7ebf\u7a0b\u540d    </p> <p>\u8fd4\u56de: None</p> Source code in <code>toolsz/system_lib.py</code> <pre><code>def setprocesstitle(name:str)-&gt;None:\n    \"\"\"\n    \u4fee\u6539\u7ebf\u7a0b\u540d\n\n    \u53c2\u6570:   \n    name (str): \u8bbe\u5b9a\u7684\u7ebf\u7a0b\u540d    \n\n    \u8fd4\u56de:\n    None\n    \"\"\"\n    setproctitle.setproctitle(name)\n</code></pre>"},{"location":"filetool/#_4","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":"<p>\u4e00\u4e9b\u5e38\u7528\u7684\u6b63\u5219\u5de5\u5177</p>"},{"location":"filetool/#toolsz.re_lib.extract_json_code","title":"<code>extract_json_code(text)</code>","text":"<p>\u4ece\u6587\u672c\u4e2d\u63d0\u53d6json\u4ee3\u7801</p> <p>\u53c2\u6570:  text (str): \u8f93\u5165\u7684\u6587\u672c\u3002    </p> <p>\u8fd4\u56de: (str) \u63d0\u53d6\u51fa\u7684json\u6587\u672c</p> Source code in <code>toolsz/re_lib.py</code> <pre><code>def extract_json_code(text:str)-&gt;str:\n    \"\"\"\n    \u4ece\u6587\u672c\u4e2d\u63d0\u53d6json\u4ee3\u7801\n\n    \u53c2\u6570:   \n    text (str): \u8f93\u5165\u7684\u6587\u672c\u3002    \n\n    \u8fd4\u56de:\n    (str) \u63d0\u53d6\u51fa\u7684json\u6587\u672c\n    \"\"\"\n    pattern = r'```json([\\s\\S]*?)```'\n    matches = re.findall(pattern, text)\n    return matches\n</code></pre>"},{"location":"filetool/#toolsz.re_lib.extract_python_code","title":"<code>extract_python_code(text)</code>","text":"<p>\u4ece\u6587\u672c\u4e2d\u63d0\u53d6python\u4ee3\u7801</p> <p>\u53c2\u6570:  text (str): \u8f93\u5165\u7684\u6587\u672c\u3002    </p> <p>\u8fd4\u56de: (str) \u63d0\u53d6\u51fa\u7684python\u6587\u672c</p> Source code in <code>toolsz/re_lib.py</code> <pre><code>def extract_python_code(text: str)-&gt;str:\n    \"\"\"\n    \u4ece\u6587\u672c\u4e2d\u63d0\u53d6python\u4ee3\u7801\n\n    \u53c2\u6570:   \n    text (str): \u8f93\u5165\u7684\u6587\u672c\u3002    \n\n    \u8fd4\u56de:\n    (str) \u63d0\u53d6\u51fa\u7684python\u6587\u672c\n    \"\"\"\n    pattern = r'```python([\\s\\S]*?)```'\n    matches = re.findall(pattern, text)\n    return matches\n</code></pre>"},{"location":"filetool/#_5","title":"\u6587\u4ef6","text":"<p>\u6587\u4ef6\u5de5\u5177</p>"},{"location":"filetool/#toolsz.file_manager.LocalFileTool","title":"<code>LocalFileTool</code>","text":"<p>LocalFileTool TODO</p> Source code in <code>toolsz/file_manager.py</code> <pre><code>class LocalFileTool:\n    \"\"\"\n    LocalFileTool TODO\n    \"\"\"\n    def __init__(self, base_dir):\n        self.base_dir = base_dir\n\n    def get_file_list(self, dir_path='', include_extensions=None, exclude_pycache=True):\n        \"\"\"\u83b7\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u5217\u8868\n        :param dir_path: \u76f8\u5bf9\u4e8e\u57fa\u7840\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\u8def\u5f84\n        :param include_extensions: \u8981\u5305\u542b\u7684\u6587\u4ef6\u6269\u5c55\u540d\u5217\u8868\uff0c\u5982 ['.py', '.txt']\uff0c\u9ed8\u8ba4\u5305\u542b\u6240\u6709\u6587\u4ef6\n        :param exclude_pycache: \u662f\u5426\u6392\u9664 __pycache__ \u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a True\n        :return: \u6587\u4ef6\u8def\u5f84\u5217\u8868\n        \"\"\"\n        full_dir_path = os.path.join(self.base_dir, dir_path)\n        if not os.path.exists(full_dir_path) or not os.path.isdir(full_dir_path):\n            print(f\"Directory {full_dir_path} does not exist\")\n            return []\n\n        file_list = []\n        for root, dirs, files in os.walk(full_dir_path):\n            # \u6392\u9664 __pycache__ \u76ee\u5f55\n            if exclude_pycache:\n                dirs[:] = [d for d in dirs if d != '__pycache__']\n\n            relative_root = os.path.relpath(root, self.base_dir)\n            for file in files:\n                if include_extensions is None or os.path.splitext(file)[1] in include_extensions:\n                    relative_path = os.path.join(relative_root, file)\n                    # \u5982\u679c\u662f\u57fa\u7840\u76ee\u5f55\u672c\u8eab\uff0c\u907f\u514d\u8def\u5f84\u4ee5 ./ \u5f00\u5934\n                    if relative_path.startswith(os.path.sep):\n                        relative_path = relative_path[len(os.path.sep):]\n                    file_list.append(relative_path)\n        return file_list\n\n    def get_file_content(self, file_path):\n        \"\"\"\u83b7\u53d6\u5355\u4e2a\u6587\u4ef6\u5185\u5bb9\"\"\"\n        full_path = os.path.join(self.base_dir, file_path)\n        if not os.path.exists(full_path):\n            print(f\"File {full_path} does not exist\")\n            return None\n\n        try:\n            with open(full_path, 'r', encoding='utf-8') as f:\n                return f.read()\n        except Exception as e:\n            print(f\"Error reading file {full_path}: {e}\")\n            return None\n\n    def get_multiple_files(self, file_paths):\n        \"\"\"\u83b7\u53d6\u591a\u4e2a\u6587\u4ef6\u5185\u5bb9\u5e76\u683c\u5f0f\u5316\u4e3a\u6ce8\u91ca\u6807\u8bc6\u7684\u5b57\u7b26\u4e32\"\"\"\n        content_list = []\n        for path in file_paths:\n            content = self.get_file_content(path)\n            if content is not None:\n                # \u4e3a\u6bcf\u4e2a\u6587\u4ef6\u6dfb\u52a0\u6ce8\u91ca\u6807\u8bc6\n                content_list.append(f\"# {path}\")\n                content_list.append(content)\n                # \u5728\u6587\u4ef6\u4e4b\u95f4\u6dfb\u52a0\u5206\u9694\u7b26\n                content_list.append(\"\\n\")\n        return \"\\n\".join(content_list)\n\n    def write_single_file(self, file_path, content):\n        \"\"\"\u5199\u5165\u5355\u4e2a\u6587\u4ef6\"\"\"\n        full_path = os.path.join(self.base_dir, file_path)\n        dir_name = os.path.dirname(full_path)\n\n        # \u786e\u4fdd\u76ee\u6807\u76ee\u5f55\u5b58\u5728\n        if not os.path.exists(dir_name):\n            os.makedirs(dir_name, exist_ok=True)\n\n        try:\n            with open(full_path, 'w', encoding='utf-8') as f:\n                f.write(content)\n            return True\n        except Exception as e:\n            print(f\"Error writing file {full_path}: {e}\")\n            return False\n\n    def write_multiple_files_from_string(self, formatted_string):\n        \"\"\"\u4ece\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5199\u5165\u591a\u4e2a\u6587\u4ef6\"\"\"\n        lines = formatted_string.split('\\n')\n        current_file_path = None\n        current_file_content = []\n\n        for line in lines:\n            if line.startswith('# ') and line.endswith('.py'):\n                # \u5982\u679c\u4e4b\u524d\u6709\u6587\u4ef6\u5185\u5bb9\uff0c\u5148\u5199\u5165\n                if current_file_path is not None and current_file_content:\n                    self.write_single_file(current_file_path, '\\n'.join(current_file_content))\n                    current_file_content = []\n\n                # \u63d0\u53d6\u6587\u4ef6\u8def\u5f84\n                current_file_path = line[2:].strip()\n                # \u68c0\u67e5\u6587\u4ef6\u8def\u5f84\u662f\u5426\u6709\u6548\n                if not current_file_path:\n                    current_file_path = None\n                    continue\n            elif current_file_path is not None:\n                # \u6dfb\u52a0\u5230\u5f53\u524d\u6587\u4ef6\u5185\u5bb9\n                current_file_content.append(line)\n\n        # \u5199\u5165\u6700\u540e\u4e00\u4e2a\u6587\u4ef6\n        if current_file_path is not None and current_file_content:\n            self.write_single_file(current_file_path, '\\n'.join(current_file_content))\n\n        return True\n\n    def get_related_files(self, file_path):\n        \"\"\"\u83b7\u53d6\u4e0e\u6307\u5b9a\u6587\u4ef6\u76f8\u5173\u8054\u7684\u6240\u6709\u9879\u76ee\u5185\u6587\u4ef6\"\"\"\n        all_files = self.get_file_list(include_extensions=['.py'])\n        related_files = set()\n        self._analyze_imports(file_path, all_files, related_files)\n        return list(related_files)\n\n    def _analyze_imports(self, file_path, all_files, related_files):\n        \"\"\"\u5206\u6790\u6587\u4ef6\u7684\u5bfc\u5165\u8bed\u53e5\uff0c\u9012\u5f52\u67e5\u627e\u76f8\u5173\u6587\u4ef6\"\"\"\n        if file_path in related_files:\n            return\n        related_files.add(file_path)\n\n        content = self.get_file_content(file_path)\n        if content is None:\n            return\n\n        try:\n            tree = ast.parse(content)\n            for node in ast.walk(tree):\n                if isinstance(node, ast.Import):\n                    for alias in node.names:\n                        module_name = alias.name\n                        self._find_and_add_module(module_name, all_files, related_files)\n                elif isinstance(node, ast.ImportFrom):\n                    module_name = node.module\n                    self._find_and_add_module(module_name, all_files, related_files)\n        except Exception as e:\n            print(f\"Error analyzing imports in {file_path}: {e}\")\n\n    def _find_and_add_module(self, module_name, all_files, related_files):\n        \"\"\"\u6839\u636e\u6a21\u5757\u540d\u67e5\u627e\u5bf9\u5e94\u7684\u6587\u4ef6\u5e76\u6dfb\u52a0\u5230\u76f8\u5173\u6587\u4ef6\u5217\u8868\"\"\"\n        for file in all_files:\n            if file.endswith(f\"{module_name}.py\") or file.replace(os.path.sep, '.')[:-3] == module_name:\n                self._analyze_imports(file, all_files, related_files)\n                break\n</code></pre>"},{"location":"filetool/#toolsz.file_manager.LocalFileTool.get_file_content","title":"<code>get_file_content(file_path)</code>","text":"<p>\u83b7\u53d6\u5355\u4e2a\u6587\u4ef6\u5185\u5bb9</p> Source code in <code>toolsz/file_manager.py</code> <pre><code>def get_file_content(self, file_path):\n    \"\"\"\u83b7\u53d6\u5355\u4e2a\u6587\u4ef6\u5185\u5bb9\"\"\"\n    full_path = os.path.join(self.base_dir, file_path)\n    if not os.path.exists(full_path):\n        print(f\"File {full_path} does not exist\")\n        return None\n\n    try:\n        with open(full_path, 'r', encoding='utf-8') as f:\n            return f.read()\n    except Exception as e:\n        print(f\"Error reading file {full_path}: {e}\")\n        return None\n</code></pre>"},{"location":"filetool/#toolsz.file_manager.LocalFileTool.get_file_list","title":"<code>get_file_list(dir_path='', include_extensions=None, exclude_pycache=True)</code>","text":"<p>\u83b7\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u5217\u8868 :param dir_path: \u76f8\u5bf9\u4e8e\u57fa\u7840\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\u8def\u5f84 :param include_extensions: \u8981\u5305\u542b\u7684\u6587\u4ef6\u6269\u5c55\u540d\u5217\u8868\uff0c\u5982 ['.py', '.txt']\uff0c\u9ed8\u8ba4\u5305\u542b\u6240\u6709\u6587\u4ef6 :param exclude_pycache: \u662f\u5426\u6392\u9664 pycache \u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a True :return: \u6587\u4ef6\u8def\u5f84\u5217\u8868</p> Source code in <code>toolsz/file_manager.py</code> <pre><code>def get_file_list(self, dir_path='', include_extensions=None, exclude_pycache=True):\n    \"\"\"\u83b7\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u5217\u8868\n    :param dir_path: \u76f8\u5bf9\u4e8e\u57fa\u7840\u76ee\u5f55\u7684\u5b50\u76ee\u5f55\u8def\u5f84\n    :param include_extensions: \u8981\u5305\u542b\u7684\u6587\u4ef6\u6269\u5c55\u540d\u5217\u8868\uff0c\u5982 ['.py', '.txt']\uff0c\u9ed8\u8ba4\u5305\u542b\u6240\u6709\u6587\u4ef6\n    :param exclude_pycache: \u662f\u5426\u6392\u9664 __pycache__ \u76ee\u5f55\uff0c\u9ed8\u8ba4\u4e3a True\n    :return: \u6587\u4ef6\u8def\u5f84\u5217\u8868\n    \"\"\"\n    full_dir_path = os.path.join(self.base_dir, dir_path)\n    if not os.path.exists(full_dir_path) or not os.path.isdir(full_dir_path):\n        print(f\"Directory {full_dir_path} does not exist\")\n        return []\n\n    file_list = []\n    for root, dirs, files in os.walk(full_dir_path):\n        # \u6392\u9664 __pycache__ \u76ee\u5f55\n        if exclude_pycache:\n            dirs[:] = [d for d in dirs if d != '__pycache__']\n\n        relative_root = os.path.relpath(root, self.base_dir)\n        for file in files:\n            if include_extensions is None or os.path.splitext(file)[1] in include_extensions:\n                relative_path = os.path.join(relative_root, file)\n                # \u5982\u679c\u662f\u57fa\u7840\u76ee\u5f55\u672c\u8eab\uff0c\u907f\u514d\u8def\u5f84\u4ee5 ./ \u5f00\u5934\n                if relative_path.startswith(os.path.sep):\n                    relative_path = relative_path[len(os.path.sep):]\n                file_list.append(relative_path)\n    return file_list\n</code></pre>"},{"location":"filetool/#toolsz.file_manager.LocalFileTool.get_multiple_files","title":"<code>get_multiple_files(file_paths)</code>","text":"<p>\u83b7\u53d6\u591a\u4e2a\u6587\u4ef6\u5185\u5bb9\u5e76\u683c\u5f0f\u5316\u4e3a\u6ce8\u91ca\u6807\u8bc6\u7684\u5b57\u7b26\u4e32</p> Source code in <code>toolsz/file_manager.py</code> <pre><code>def get_multiple_files(self, file_paths):\n    \"\"\"\u83b7\u53d6\u591a\u4e2a\u6587\u4ef6\u5185\u5bb9\u5e76\u683c\u5f0f\u5316\u4e3a\u6ce8\u91ca\u6807\u8bc6\u7684\u5b57\u7b26\u4e32\"\"\"\n    content_list = []\n    for path in file_paths:\n        content = self.get_file_content(path)\n        if content is not None:\n            # \u4e3a\u6bcf\u4e2a\u6587\u4ef6\u6dfb\u52a0\u6ce8\u91ca\u6807\u8bc6\n            content_list.append(f\"# {path}\")\n            content_list.append(content)\n            # \u5728\u6587\u4ef6\u4e4b\u95f4\u6dfb\u52a0\u5206\u9694\u7b26\n            content_list.append(\"\\n\")\n    return \"\\n\".join(content_list)\n</code></pre>"},{"location":"filetool/#toolsz.file_manager.LocalFileTool.get_related_files","title":"<code>get_related_files(file_path)</code>","text":"<p>\u83b7\u53d6\u4e0e\u6307\u5b9a\u6587\u4ef6\u76f8\u5173\u8054\u7684\u6240\u6709\u9879\u76ee\u5185\u6587\u4ef6</p> Source code in <code>toolsz/file_manager.py</code> <pre><code>def get_related_files(self, file_path):\n    \"\"\"\u83b7\u53d6\u4e0e\u6307\u5b9a\u6587\u4ef6\u76f8\u5173\u8054\u7684\u6240\u6709\u9879\u76ee\u5185\u6587\u4ef6\"\"\"\n    all_files = self.get_file_list(include_extensions=['.py'])\n    related_files = set()\n    self._analyze_imports(file_path, all_files, related_files)\n    return list(related_files)\n</code></pre>"},{"location":"filetool/#toolsz.file_manager.LocalFileTool.write_multiple_files_from_string","title":"<code>write_multiple_files_from_string(formatted_string)</code>","text":"<p>\u4ece\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5199\u5165\u591a\u4e2a\u6587\u4ef6</p> Source code in <code>toolsz/file_manager.py</code> <pre><code>def write_multiple_files_from_string(self, formatted_string):\n    \"\"\"\u4ece\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u5199\u5165\u591a\u4e2a\u6587\u4ef6\"\"\"\n    lines = formatted_string.split('\\n')\n    current_file_path = None\n    current_file_content = []\n\n    for line in lines:\n        if line.startswith('# ') and line.endswith('.py'):\n            # \u5982\u679c\u4e4b\u524d\u6709\u6587\u4ef6\u5185\u5bb9\uff0c\u5148\u5199\u5165\n            if current_file_path is not None and current_file_content:\n                self.write_single_file(current_file_path, '\\n'.join(current_file_content))\n                current_file_content = []\n\n            # \u63d0\u53d6\u6587\u4ef6\u8def\u5f84\n            current_file_path = line[2:].strip()\n            # \u68c0\u67e5\u6587\u4ef6\u8def\u5f84\u662f\u5426\u6709\u6548\n            if not current_file_path:\n                current_file_path = None\n                continue\n        elif current_file_path is not None:\n            # \u6dfb\u52a0\u5230\u5f53\u524d\u6587\u4ef6\u5185\u5bb9\n            current_file_content.append(line)\n\n    # \u5199\u5165\u6700\u540e\u4e00\u4e2a\u6587\u4ef6\n    if current_file_path is not None and current_file_content:\n        self.write_single_file(current_file_path, '\\n'.join(current_file_content))\n\n    return True\n</code></pre>"},{"location":"filetool/#toolsz.file_manager.LocalFileTool.write_single_file","title":"<code>write_single_file(file_path, content)</code>","text":"<p>\u5199\u5165\u5355\u4e2a\u6587\u4ef6</p> Source code in <code>toolsz/file_manager.py</code> <pre><code>def write_single_file(self, file_path, content):\n    \"\"\"\u5199\u5165\u5355\u4e2a\u6587\u4ef6\"\"\"\n    full_path = os.path.join(self.base_dir, file_path)\n    dir_name = os.path.dirname(full_path)\n\n    # \u786e\u4fdd\u76ee\u6807\u76ee\u5f55\u5b58\u5728\n    if not os.path.exists(dir_name):\n        os.makedirs(dir_name, exist_ok=True)\n\n    try:\n        with open(full_path, 'w', encoding='utf-8') as f:\n            f.write(content)\n        return True\n    except Exception as e:\n        print(f\"Error writing file {full_path}: {e}\")\n        return False\n</code></pre>"}]}